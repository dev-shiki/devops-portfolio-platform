name: PR Pipeline

on:
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-cache-${{ hashFiles('user-service/go.sum', 'order-service/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-cache-
          ${{ runner.os }}-go-
        
    - name: Download dependencies - User Service
      working-directory: ./user-service
      run: go mod download
      
    - name: Download dependencies - Order Service  
      working-directory: ./order-service
      run: go mod download
      
    - name: Run tests - User Service
      working-directory: ./user-service
      run: go test -v ./... -coverprofile=coverage.out
      
    - name: Run tests - Order Service
      working-directory: ./order-service  
      run: go test -v ./... -coverprofile=coverage.out
      
    - name: Build - User Service
      working-directory: ./user-service
      run: go build -v .
      
    - name: Build - Order Service
      working-directory: ./order-service
      run: go build -v .

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner - User Service
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './user-service'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        
    - name: Run Trivy vulnerability scanner - Order Service
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs' 
        scan-ref: './order-service'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  build-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build User Service image (test only)
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        file: ./user-service/Dockerfile
        push: false
        tags: user-service:pr-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Order Service image (test only)
      uses: docker/build-push-action@v5
      with:
        context: ./order-service
        file: ./order-service/Dockerfile
        push: false
        tags: order-service:pr-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-test]
    if: always()
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## 🔍 PR Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ **Security**: No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Test:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "✅ **Build**: Docker images build successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Docker build failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review code changes" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure all checks pass" >> $GITHUB_STEP_SUMMARY
        echo "- Merge to trigger full CI pipeline" >> $GITHUB_STEP_SUMMARY 