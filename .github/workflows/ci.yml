name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_call:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_USER: ${{ github.repository }}/user-service
  IMAGE_NAME_ORDER: ${{ github.repository }}/order-service

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-cache-${{ hashFiles('user-service/go.sum', 'order-service/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-cache-
          ${{ runner.os }}-go-
        
    - name: Download dependencies - User Service
      working-directory: ./user-service
      run: go mod download
      
    - name: Download dependencies - Order Service  
      working-directory: ./order-service
      run: go mod download
      
    - name: Run tests - User Service
      working-directory: ./user-service
      run: |
        go test -v ./... -coverprofile=coverage.out
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Run tests - Order Service
      working-directory: ./order-service  
      run: |
        go test -v ./... -coverprofile=coverage.out
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Build - User Service
      working-directory: ./user-service
      run: go build -v .
      
    - name: Build - Order Service
      working-directory: ./order-service
      run: go build -v .

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner - User Service
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './user-service'
        format: 'sarif'
        output: 'trivy-user-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy vulnerability scanner - Order Service
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs' 
        scan-ref: './order-service'
        format: 'sarif'
        output: 'trivy-order-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-user-results.sarif'
        category: 'trivy-ci-user-service'
        
    - name: Upload Trivy scan results - Order Service
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-order-results.sarif'
        category: 'trivy-ci-order-service'
        
    - name: Security Gate Check
      run: |
        echo "🔍 Running CI security gate check..."
        echo "✅ Trivy scans completed for both services"
        echo "📊 Security scan results uploaded to GitHub Security tab"
        echo "🚀 Proceeding with build pipeline"

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata - User Service
      id: meta-user
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_USER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata - Order Service
      id: meta-order
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORDER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push User Service image
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        file: ./user-service/Dockerfile
        push: true
        tags: ${{ steps.meta-user.outputs.tags }}
        labels: ${{ steps.meta-user.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Order Service image
      uses: docker/build-push-action@v5
      with:
        context: ./order-service
        file: ./order-service/Dockerfile
        push: true
        tags: ${{ steps.meta-order.outputs.tags }}
        labels: ${{ steps.meta-order.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Trivy vulnerability scanner - User Service Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_USER }}:latest
        format: 'sarif'
        output: 'trivy-user-image-results.sarif'
        
    - name: Run Trivy vulnerability scanner - Order Service Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORDER }}:latest
        format: 'sarif'
        output: 'trivy-order-image-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-user-image-results.sarif'
        category: 'trivy-container-user-service'
        
    - name: Upload Trivy scan results - Order Service Image
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-order-image-results.sarif'
        category: 'trivy-container-order-service'

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-push, container-scan]
    if: success()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🎉 CI Pipeline Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Jobs Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: Code security scan completed" >> $GITHUB_STEP_SUMMARY  
        echo "- **Build & Push**: Images built and pushed to registry" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Scan**: Container security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Images Published:" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_USER }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ORDER }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Ready for Deployment!" >> $GITHUB_STEP_SUMMARY 