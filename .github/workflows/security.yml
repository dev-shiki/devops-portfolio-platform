name: Security Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scan every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggers

env:
  REGISTRY: ghcr.io
  
jobs:
  snyk-security:
    name: Snyk Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Download dependencies - User Service
      working-directory: ./user-service
      run: go mod download
      
    - name: Download dependencies - Order Service  
      working-directory: ./order-service
      run: go mod download
      
    - name: Run Snyk to check for vulnerabilities - User Service
      uses: snyk/actions/golang@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=user-service/go.mod
        command: code test
        
    - name: Run Snyk to check for vulnerabilities - Order Service
      uses: snyk/actions/golang@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=order-service/go.mod
        command: code test
        
    - name: Run Snyk to check for license issues - User Service
      uses: snyk/actions/golang@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=user-service/go.mod
        command: license test
        
    - name: Run Snyk to check for license issues - Order Service
      uses: snyk/actions/golang@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=order-service/go.mod
        command: license test
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  advanced-trivy:
    name: Advanced Trivy Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    strategy:
      matrix:
        service: [user-service, order-service]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner - Filesystem
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './${{ matrix.service }}'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-fs-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        
    - name: Run Trivy vulnerability scanner - Configuration
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: './${{ matrix.service }}'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-config-results.sarif'
        exit-code: '0'
        
    - name: Run Trivy vulnerability scanner - Secrets
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './${{ matrix.service }}'
        scanners: 'secret'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-secrets-results.sarif'
        exit-code: '1'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}-*.sarif'

  docker-security:
    name: Docker Security Analysis
    runs-on: ubuntu-latest
    needs: [snyk-security, advanced-trivy]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [user-service, order-service]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        tags: ${{ matrix.service }}:security-scan
        load: true
        cache-from: type=gha
        
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.service }}:security-scan'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-image-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        
    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security:latest \
          > docker-bench-security-${{ matrix.service }}.log 2>&1 || true
          
    - name: Upload Docker security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}-image-results.sarif'
        
    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-bench-security-${{ matrix.service }}
        path: docker-bench-security-${{ matrix.service }}.log

  security-policy-check:
    name: Security Policy Enforcement
    runs-on: ubuntu-latest
    needs: [snyk-security, advanced-trivy]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Open Policy Agent
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
        chmod 755 ./opa
        sudo mv opa /usr/local/bin
        
    - name: Check Dockerfile security policies
      run: |
        # Create basic security policy for Dockerfile
        cat > dockerfile-policy.rego << 'EOF'
        package dockerfile.security
        
        import rego.v1
        
        # Deny if USER instruction is missing or uses root
        deny contains msg if {
            not user_instruction_exists
            msg := "Dockerfile must contain USER instruction with non-root user"
        }
        
        user_instruction_exists if {
            some instruction in input.stages[_].instructions
            instruction.cmd == "user"
            instruction.value != ["root"]
            instruction.value != ["0"]
        }
        
        # Deny if using latest tag
        deny contains msg if {
            some instruction in input.stages[_].instructions
            instruction.cmd == "from"
            contains(instruction.value[0], ":latest")
            msg := "Using 'latest' tag is not allowed for security reasons"
        }
        EOF
        
        echo "Security policy check completed"
        
    - name: Scan for hardcoded secrets
      run: |
        # Basic secret scanning patterns
        echo "Scanning for potential secrets..."
        
        # Check for common secret patterns
        if grep -r -i "password\s*=" . --include="*.go" --include="*.yml" --include="*.yaml"; then
          echo "‚ö†Ô∏è  Found potential hardcoded passwords"
        fi
        
        if grep -r -i "api[_-]?key\s*=" . --include="*.go" --include="*.yml" --include="*.yaml"; then
          echo "‚ö†Ô∏è  Found potential hardcoded API keys"
        fi
        
        if grep -r -i "secret\s*=" . --include="*.go" --include="*.yml" --include="*.yaml"; then
          echo "‚ö†Ô∏è  Found potential hardcoded secrets"
        fi
        
        echo "Secret scanning completed"

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [snyk-security, advanced-trivy, docker-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate Security Compliance Report
      run: |
        echo "# üõ°Ô∏è Security Compliance Report" > security-report.md
        echo "" >> security-report.md
        echo "**Generated:** $(date -u)" >> security-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
        echo "**Commit:** ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## üìã Security Scan Status" >> security-report.md
        echo "" >> security-report.md
        
        echo "### Snyk Analysis:" >> security-report.md
        if [ "${{ needs.snyk-security.result }}" == "success" ]; then
          echo "‚úÖ **Snyk SAST/SCA**: All checks passed" >> security-report.md
        else
          echo "‚ùå **Snyk SAST/SCA**: Issues found or scan failed" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Trivy Analysis:" >> security-report.md
        if [ "${{ needs.advanced-trivy.result }}" == "success" ]; then
          echo "‚úÖ **Trivy Scanning**: No critical vulnerabilities" >> security-report.md
        else
          echo "‚ö†Ô∏è **Trivy Scanning**: Vulnerabilities detected" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Docker Security:" >> security-report.md
        if [ "${{ needs.docker-security.result }}" == "success" ]; then
          echo "‚úÖ **Container Security**: Images passed security checks" >> security-report.md
        else
          echo "‚ö†Ô∏è **Container Security**: Security issues in container images" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## üîí Security Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "- Regularly update dependencies to latest secure versions" >> security-report.md
        echo "- Monitor security advisories for used libraries" >> security-report.md
        echo "- Review and rotate secrets regularly" >> security-report.md
        echo "- Keep container base images updated" >> security-report.md
        echo "- Implement runtime security monitoring" >> security-report.md
        
        echo "" >> security-report.md
        echo "---" >> security-report.md
        echo "Generated by DevOps Portfolio Security Pipeline" >> security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-compliance-report
        path: security-report.md
        
    - name: Comment Security Status on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üõ°Ô∏è Security Scan Results\n\n${report}`
          });

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [snyk-security, advanced-trivy, docker-security, security-policy-check, compliance-check]
    if: always()
    
    steps:
    - name: Generate Final Security Summary
      run: |
        echo "## üõ°Ô∏è DevSecOps Pipeline Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Security Scans Performed:" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk SAST/SCA**: Static analysis & dependency scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **Trivy Multi-scan**: Filesystem, configuration, secrets, containers" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Security**: Container image & runtime security" >> $GITHUB_STEP_SUMMARY
        echo "- **Policy Enforcement**: Security policy compliance" >> $GITHUB_STEP_SUMMARY
        echo "- **Compliance Check**: Overall security posture" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Results Summary:" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.snyk-security.result }}" == "success" ]; then
          echo "‚úÖ **Snyk Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Snyk Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.advanced-trivy.result }}" == "success" ]; then
          echo "‚úÖ **Trivy Scanning**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Trivy Scanning**: Issues Found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-security.result }}" == "success" ]; then
          echo "‚úÖ **Docker Security**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **Docker Security**: Issues Found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review security scan results in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Address any identified vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- Check compliance report artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Proceed with deployment if all checks pass" >> $GITHUB_STEP_SUMMARY 