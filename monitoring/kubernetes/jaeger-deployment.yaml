apiVersion: v1
kind: Namespace
metadata:
  name: observability
  labels:
    name: observability
    app.kubernetes.io/component: tracing
    app.kubernetes.io/part-of: devops-portfolio

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: observability

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jaeger-operator
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets", "serviceaccounts"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["*"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors"]
  verbs: ["get", "create"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jaeger-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger-operator
subjects:
- kind: ServiceAccount
  name: jaeger
  namespace: observability

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: observability
  labels:
    app: jaeger
data:
  sampling_strategies.json: |
    {
      "service_strategies": [
        {
          "service": "user-service",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100
        },
        {
          "service": "order-service", 
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.1,
        "max_traces_per_second": 50
      },
      "per_operation_strategies": [
        {
          "service": "user-service",
          "operation": "GetUser",
          "type": "probabilistic",
          "param": 0.8
        },
        {
          "service": "order-service",
          "operation": "CreateOrder",
          "type": "probabilistic", 
          "param": 1.0
        }
      ]
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: observability
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      serviceAccountName: jaeger
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.47.0
        args:
          - --memory.max-traces=50000
          - --query.base-path=/jaeger
          - --prometheus.server-url=http://prometheus-service.monitoring:9090
          - --prometheus.query.support-spanmetrics-connector=true
          - --collector.zipkin.host-port=:9411
        ports:
        - containerPort: 16686
          name: query
          protocol: TCP
        - containerPort: 14268
          name: http-collector
          protocol: TCP
        - containerPort: 14250
          name: grpc-collector
          protocol: TCP
        - containerPort: 14269
          name: admin
          protocol: TCP
        - containerPort: 9411
          name: zipkin
          protocol: TCP
        - containerPort: 5775
          name: udp-compact
          protocol: UDP
        - containerPort: 6831
          name: udp-thrift
          protocol: UDP
        - containerPort: 6832
          name: udp-binary
          protocol: UDP
        - containerPort: 5778
          name: config-rest
          protocol: TCP
        env:
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: METRICS_STORAGE_TYPE
          value: prometheus
        - name: PROMETHEUS_SERVER_URL
          value: "http://prometheus-service.monitoring:9090"
        - name: SPAN_STORAGE_TYPE
          value: memory
        - name: JAEGER_DISABLED
          value: "false"
        - name: JAEGER_AGENT_HOST
          value: localhost
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        - name: JAEGER_REPORTER_LOG_SPANS
          value: "true"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: jaeger-configuration
          mountPath: /etc/jaeger/
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: jaeger-configuration
        configMap:
          name: jaeger-configuration

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: observability
  labels:
    app: jaeger
    component: query
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: query-http
    port: 16686
    targetPort: 16686
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: observability
  labels:
    app: jaeger
    component: collector
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: jaeger-collector-http
    port: 14268
    targetPort: 14268
    protocol: TCP
  - name: jaeger-collector-grpc
    port: 14250
    targetPort: 14250
    protocol: TCP
  - name: zipkin
    port: 9411
    targetPort: 9411
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: observability
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: agent-zipkin-thrift
    port: 5775
    targetPort: 5775
    protocol: UDP
  - name: agent-compact
    port: 6831
    targetPort: 6831
    protocol: UDP
  - name: agent-binary
    port: 6832
    targetPort: 6832
    protocol: UDP
  - name: agent-configs
    port: 5778
    targetPort: 5778
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-external
  namespace: observability
  labels:
    app: jaeger
    access: external
spec:
  selector:
    app: jaeger
    component: all-in-one
  ports:
  - name: query-http
    port: 16686
    targetPort: 16686
    nodePort: 30686
    protocol: TCP
  type: NodePort

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  namespace: observability
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
      component: agent
  template:
    metadata:
      labels:
        app: jaeger
        component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14271"
    spec:
      serviceAccountName: jaeger
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent:1.47.0
        args:
          - --reporter.grpc.host-port=jaeger-collector.observability:14250
          - --reporter.type=grpc
          - --agent.tags=cluster=devops-portfolio,environment=production
        ports:
        - containerPort: 5775
          protocol: UDP
          hostPort: 5775
        - containerPort: 6831
          protocol: UDP
          hostPort: 6831
        - containerPort: 6832
          protocol: UDP
          hostPort: 6832
        - containerPort: 5778
          protocol: TCP
          hostPort: 5778
        - containerPort: 14271
          protocol: TCP
          hostPort: 14271
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 5
          timeoutSeconds: 5

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-ui-config
  namespace: observability
  labels:
    app: jaeger
data:
  ui-config.json: |
    {
      "monitor": {
        "menuEnabled": true
      },
      "dependencies": {
        "menuEnabled": true
      },
      "archiveEnabled": true,
      "tracking": {
        "gaID": "",
        "trackErrors": true
      },
      "search": {
        "maxLookback": {
          "label": "2 days",
          "value": "2d"
        }
      },
      "criticalPath": {
        "enabled": true
      }
    } 